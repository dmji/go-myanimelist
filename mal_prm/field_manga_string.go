// Code generated by "go-stringer -type=MangaFieldType -trimprefix=MangaFieldType -output field_manga_string.go -nametransform=snake_case_lower -fromstringgenfn -marshaljson -marshalqs -marshalqspkg=github.com/dmji/qs -outputtransform=snake_case_lower"; DO NOT EDIT.

package mal_prm

import (
	json "encoding/json"
	"errors"
	qs "github.com/dmji/qs"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MangaFieldTypeID-0]
	_ = x[MangaFieldTypeTitle-1]
	_ = x[MangaFieldTypeMainPicture-2]
	_ = x[MangaFieldTypeAlternativeTitles-3]
	_ = x[MangaFieldTypeStartDate-4]
	_ = x[MangaFieldTypeSynopsis-5]
	_ = x[MangaFieldTypeMean-6]
	_ = x[MangaFieldTypeRank-7]
	_ = x[MangaFieldTypePopularity-8]
	_ = x[MangaFieldTypeNumListUsers-9]
	_ = x[MangaFieldTypeNumScoringUsers-10]
	_ = x[MangaFieldTypeNsfw-11]
	_ = x[MangaFieldTypeCreatedAt-12]
	_ = x[MangaFieldTypeUpdatedAt-13]
	_ = x[MangaFieldTypeMediaType-14]
	_ = x[MangaFieldTypeStatus-15]
	_ = x[MangaFieldTypeGenres-16]
	_ = x[MangaFieldTypeMyListStatus-17]
	_ = x[MangaFieldTypeNumVolumes-18]
	_ = x[MangaFieldTypeNumChapters-19]
	_ = x[MangaFieldTypeAuthors-20]
	_ = x[MangaFieldTypePictures-21]
	_ = x[MangaFieldTypeBackground-22]
	_ = x[MangaFieldTypeRelatedAnime-23]
	_ = x[MangaFieldTypeRelatedManga-24]
	_ = x[MangaFieldTypeRecommendations-25]
	_ = x[MangaFieldTypeSerialization-26]
	_ = x[MangaFieldTypeListStatus-27]
	_ = x[MangaFieldTypeNode-28]
}

const _MangaFieldType_name = "idtitlemain_picturealternative_titlesstart_datesynopsismeanrankpopularitynum_list_usersnum_scoring_usersnsfwcreated_atupdated_atmedia_typestatusgenresmy_list_statusnum_volumesnum_chaptersauthorspicturesbackgroundrelated_animerelated_mangarecommendationsserializationlist_statusnode"

var _MangaFieldType_index = [...]uint16{0, 2, 7, 19, 37, 47, 55, 59, 63, 73, 87, 104, 108, 118, 128, 138, 144, 150, 164, 175, 187, 194, 202, 212, 225, 238, 253, 266, 277, 281}

func (i MangaFieldType) String() string {
	if i >= MangaFieldType(len(_MangaFieldType_index)-1) {
		return "MangaFieldType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MangaFieldType_name[_MangaFieldType_index[i]:_MangaFieldType_index[i+1]]
}
func MangaFieldTypeFromString(s string) (MangaFieldType, error) {
	for i := 0; i < 29; i++ {
		if e := MangaFieldType(i + 0); s == e.String() {
			return e, nil
		}
	}
	return MangaFieldType(0), errors.New("cannot deternime MangaFieldType from string")
}

func (e MangaFieldType) MarshalQS(opts *qs.MarshalOptions) ([]string, error) {
	return []string{e.String()}, nil
}

func (e *MangaFieldType) UnmarshalQS(a []string, opts *qs.UnmarshalOptions) error {
	s, err := opts.SliceToString(a)
	if err != nil {
		return err
	}
	*e, err = MangaFieldTypeFromString(s)
	return err
}
func (e MangaFieldType) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

func (e *MangaFieldType) UnmarshalJSON(data []byte) error {
	var s string
	err := json.Unmarshal(data, &s)
	if err != nil {
		return err
	}

	*e, err = MangaFieldTypeFromString(s)
	return err
}
