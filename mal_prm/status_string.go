// Code generated by "go-stringer -type=AnimeStatus,MangaStatus -trimprefix=@me -output status_string.go -nametransform=snake_case_lower -fromstringgenfn -marshaljson -marshalqs -marshalqspkg=github.com/dmji/qs -outputtransform=snake_case_lower"; DO NOT EDIT.

package mal_prm
import (
	"strconv"
	"errors"
	qs "github.com/dmji/qs"
	json "encoding/json"
)
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[AnimeStatusWatching - 0]
	_ = x[AnimeStatusCompleted - 1]
	_ = x[AnimeStatusOnHold - 2]
	_ = x[AnimeStatusDropped - 3]
	_ = x[AnimeStatusPlanToWatch - 4]
}

const _AnimeStatus_name = "watchingcompletedon_holddroppedplan_to_watch"
var _AnimeStatus_index = [...]uint8{0, 8, 17, 24, 31, 44}
func (i AnimeStatus) String() string {
	if i < 0 || i >= AnimeStatus(len(_AnimeStatus_index)-1) {
		return "AnimeStatus(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _AnimeStatus_name[_AnimeStatus_index[i]:_AnimeStatus_index[i+1]]
}
func AnimeStatusFromString(s string) (AnimeStatus, error) {
	for i:=0; i<5; i++ {
		if e:= AnimeStatus(i+0); s == e.String() {
			return e, nil
		}
	}
	return AnimeStatus(0), errors.New("cannot deternime AnimeStatus from string")
}

	func (e AnimeStatus) MarshalQS(opts *qs.MarshalOptions) ([]string, error) {
		return []string{e.String()}, nil
	}

	func (e *AnimeStatus) UnmarshalQS(a []string, opts *qs.UnmarshalOptions) error {
		s, err := opts.SliceToString(a)
		if err != nil {
			return err
		}
		*e, err = AnimeStatusFromString(s)
		return err
	}
	func (e AnimeStatus) MarshalJSON() ([]byte, error) {
		return json.Marshal(e.String())
	}

	func (e *AnimeStatus) UnmarshalJSON(data []byte) error {
		var s string
		err := json.Unmarshal(data, &s);
		if err != nil {
			return err
		}

		*e, err = AnimeStatusFromString(s)
		return err
	}
	
	func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MangaStatusReading - 0]
	_ = x[MangaStatusCompleted - 1]
	_ = x[MangaStatusOnHold - 2]
	_ = x[MangaStatusDropped - 3]
	_ = x[MangaStatusPlanToRead - 4]
}

const _MangaStatus_name = "readingcompletedon_holddroppedplan_to_read"
var _MangaStatus_index = [...]uint8{0, 7, 16, 23, 30, 42}
func (i MangaStatus) String() string {
	if i < 0 || i >= MangaStatus(len(_MangaStatus_index)-1) {
		return "MangaStatus(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MangaStatus_name[_MangaStatus_index[i]:_MangaStatus_index[i+1]]
}
func MangaStatusFromString(s string) (MangaStatus, error) {
	for i:=0; i<5; i++ {
		if e:= MangaStatus(i+0); s == e.String() {
			return e, nil
		}
	}
	return MangaStatus(0), errors.New("cannot deternime MangaStatus from string")
}

	func (e MangaStatus) MarshalQS(opts *qs.MarshalOptions) ([]string, error) {
		return []string{e.String()}, nil
	}

	func (e *MangaStatus) UnmarshalQS(a []string, opts *qs.UnmarshalOptions) error {
		s, err := opts.SliceToString(a)
		if err != nil {
			return err
		}
		*e, err = MangaStatusFromString(s)
		return err
	}
	func (e MangaStatus) MarshalJSON() ([]byte, error) {
		return json.Marshal(e.String())
	}

	func (e *MangaStatus) UnmarshalJSON(data []byte) error {
		var s string
		err := json.Unmarshal(data, &s);
		if err != nil {
			return err
		}

		*e, err = MangaStatusFromString(s)
		return err
	}