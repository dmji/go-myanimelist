// Code generated by "go-stringer -type=MangaRanking,AnimeRanking -trimprefix=@me -output ranking_string.go -nametransform=snake_case_lower -fromstringgenfn -marshaljson -marshalqs -marshalqspkg=github.com/dmji/qs -outputtransform=snake_case_lower"; DO NOT EDIT.

package mal_prm
import (
	"strconv"
	"errors"
	qs "github.com/dmji/qs"
	json "encoding/json"
)
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[MangaRankingAll - 0]
	_ = x[MangaRankingManga - 1]
	_ = x[MangaRankingOneshots - 2]
	_ = x[MangaRankingDoujin - 3]
	_ = x[MangaRankingLightNovels - 4]
	_ = x[MangaRankingNovels - 5]
	_ = x[MangaRankingManhwa - 6]
	_ = x[MangaRankingManhua - 7]
	_ = x[MangaRankingByPopularity - 8]
	_ = x[MangaRankingFavorite - 9]
}

const _MangaRanking_name = "allmangaoneshotsdoujinlight_novelsnovelsmanhwamanhuaby_popularityfavorite"
var _MangaRanking_index = [...]uint8{0, 3, 8, 16, 22, 34, 40, 46, 52, 65, 73}
func (i MangaRanking) String() string {
	if i < 0 || i >= MangaRanking(len(_MangaRanking_index)-1) {
		return "MangaRanking(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _MangaRanking_name[_MangaRanking_index[i]:_MangaRanking_index[i+1]]
}
func MangaRankingFromString(s string) (MangaRanking, error) {
	for i:=0; i<10; i++ {
		if e:= MangaRanking(i+0); s == e.String() {
			return e, nil
		}
	}
	return MangaRanking(0), errors.New("cannot deternime MangaRanking from string")
}

	func (e MangaRanking) MarshalQS(opts *qs.MarshalOptions) ([]string, error) {
		return []string{e.String()}, nil
	}

	func (e *MangaRanking) UnmarshalQS(a []string, opts *qs.UnmarshalOptions) error {
		s, err := opts.SliceToString(a)
		if err != nil {
			return err
		}
		*e, err = MangaRankingFromString(s)
		return err
	}
	func (e MangaRanking) MarshalJSON() ([]byte, error) {
		return json.Marshal(e.String())
	}

	func (e *MangaRanking) UnmarshalJSON(data []byte) error {
		var s string
		err := json.Unmarshal(data, &s);
		if err != nil {
			return err
		}

		*e, err = MangaRankingFromString(s)
		return err
	}
	
	func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[AnimeRankingAll - 0]
	_ = x[AnimeRankingAiring - 1]
	_ = x[AnimeRankingUpcoming - 2]
	_ = x[AnimeRankingTV - 3]
	_ = x[AnimeRankingOVA - 4]
	_ = x[AnimeRankingMovie - 5]
	_ = x[AnimeRankingSpecial - 6]
	_ = x[AnimeRankingByPopularity - 7]
	_ = x[AnimeRankingFavorite - 8]
}

const _AnimeRanking_name = "allairingupcomingtvovamoviespecialby_popularityfavorite"
var _AnimeRanking_index = [...]uint8{0, 3, 9, 17, 19, 22, 27, 34, 47, 55}
func (i AnimeRanking) String() string {
	if i >= AnimeRanking(len(_AnimeRanking_index)-1) {
		return "AnimeRanking(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _AnimeRanking_name[_AnimeRanking_index[i]:_AnimeRanking_index[i+1]]
}
func AnimeRankingFromString(s string) (AnimeRanking, error) {
	for i:=0; i<9; i++ {
		if e:= AnimeRanking(i+0); s == e.String() {
			return e, nil
		}
	}
	return AnimeRanking(0), errors.New("cannot deternime AnimeRanking from string")
}

	func (e AnimeRanking) MarshalQS(opts *qs.MarshalOptions) ([]string, error) {
		return []string{e.String()}, nil
	}

	func (e *AnimeRanking) UnmarshalQS(a []string, opts *qs.UnmarshalOptions) error {
		s, err := opts.SliceToString(a)
		if err != nil {
			return err
		}
		*e, err = AnimeRankingFromString(s)
		return err
	}
	func (e AnimeRanking) MarshalJSON() ([]byte, error) {
		return json.Marshal(e.String())
	}

	func (e *AnimeRanking) UnmarshalJSON(data []byte) error {
		var s string
		err := json.Unmarshal(data, &s);
		if err != nil {
			return err
		}

		*e, err = AnimeRankingFromString(s)
		return err
	}