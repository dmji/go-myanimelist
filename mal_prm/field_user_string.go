// Code generated by "go-stringer -type=UserFieldType -trimprefix=UserFieldType -output field_user_string.go -nametransform=snake_case_lower -fromstringgenfn -marshaljson -marshalqs -marshalqspkg=github.com/dmji/qs -outputtransform=snake_case_lower"; DO NOT EDIT.

package mal_prm

import (
	json "encoding/json"
	"errors"
	qs "github.com/dmji/qs"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[UserFieldTypeID-0]
	_ = x[UserFieldTypeName-1]
	_ = x[UserFieldTypePicture-2]
	_ = x[UserFieldTypeGender-3]
	_ = x[UserFieldTypeBirthday-4]
	_ = x[UserFieldTypeLocation-5]
	_ = x[UserFieldTypeJoinedAt-6]
	_ = x[UserFieldTypeAnimeStatistics-7]
	_ = x[UserFieldTypeTimeZone-8]
	_ = x[UserFieldTypeIsSupporter-9]
}

const _UserFieldType_name = "idnamepicturegenderbirthdaylocationjoined_atanime_statisticstime_zoneis_supporter"

var _UserFieldType_index = [...]uint8{0, 2, 6, 13, 19, 27, 35, 44, 60, 69, 81}

func (i UserFieldType) String() string {
	if i >= UserFieldType(len(_UserFieldType_index)-1) {
		return "UserFieldType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _UserFieldType_name[_UserFieldType_index[i]:_UserFieldType_index[i+1]]
}
func UserFieldTypeFromString(s string) (UserFieldType, error) {
	for i := 0; i < 10; i++ {
		if e := UserFieldType(i + 0); s == e.String() {
			return e, nil
		}
	}
	return UserFieldType(0), errors.New("cannot deternime UserFieldType from string")
}

func (e UserFieldType) MarshalQS(opts *qs.MarshalOptions) ([]string, error) {
	return []string{e.String()}, nil
}

func (e *UserFieldType) UnmarshalQS(a []string, opts *qs.UnmarshalOptions) error {
	s, err := opts.SliceToString(a)
	if err != nil {
		return err
	}
	*e, err = UserFieldTypeFromString(s)
	return err
}
func (e UserFieldType) MarshalJSON() ([]byte, error) {
	return json.Marshal(e.String())
}

func (e *UserFieldType) UnmarshalJSON(data []byte) error {
	var s string
	err := json.Unmarshal(data, &s)
	if err != nil {
		return err
	}

	*e, err = UserFieldTypeFromString(s)
	return err
}
