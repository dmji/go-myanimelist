// Code generated by "go-stringer -type=SortAnimeListBy,SortMangaListBy -trimprefix=@me -output sorting_string.go -nametransform=snake_case_lower -fromstringgenfn -marshaljson -marshalqs -marshalqspkg=github.com/dmji/qs -outputtransform=snake_case_lower"; DO NOT EDIT.

package mal_prm
import (
	"strconv"
	"errors"
	qs "github.com/dmji/qs"
	json "encoding/json"
)
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SortAnimeListByListScore - 0]
	_ = x[SortAnimeListByListUpdatedAt - 1]
	_ = x[SortAnimeListByAnimeTitle - 2]
	_ = x[SortAnimeListByAnimeStartDate - 3]
	_ = x[SortAnimeListByAnimeID - 4]
}

const _SortAnimeListBy_name = "list_scorelist_updated_atanime_titleanime_start_dateanime_id"
var _SortAnimeListBy_index = [...]uint8{0, 10, 25, 36, 52, 60}
func (i SortAnimeListBy) String() string {
	if i < 0 || i >= SortAnimeListBy(len(_SortAnimeListBy_index)-1) {
		return "SortAnimeListBy(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SortAnimeListBy_name[_SortAnimeListBy_index[i]:_SortAnimeListBy_index[i+1]]
}
func SortAnimeListByFromString(s string) (SortAnimeListBy, error) {
	for i:=0; i<5; i++ {
		if e:= SortAnimeListBy(i+0); s == e.String() {
			return e, nil
		}
	}
	return SortAnimeListBy(0), errors.New("cannot deternime SortAnimeListBy from string")
}

	func (e SortAnimeListBy) MarshalQS(opts *qs.MarshalOptions) ([]string, error) {
		return []string{e.String()}, nil
	}

	func (e *SortAnimeListBy) UnmarshalQS(a []string, opts *qs.UnmarshalOptions) error {
		s, err := opts.SliceToString(a)
		if err != nil {
			return err
		}
		*e, err = SortAnimeListByFromString(s)
		return err
	}
	func (e SortAnimeListBy) MarshalJSON() ([]byte, error) {
		return json.Marshal(e.String())
	}

	func (e *SortAnimeListBy) UnmarshalJSON(data []byte) error {
		var s string
		err := json.Unmarshal(data, &s);
		if err != nil {
			return err
		}

		*e, err = SortAnimeListByFromString(s)
		return err
	}
	
	func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SortMangaListByListScore - 0]
	_ = x[SortMangaListByListUpdatedAt - 1]
	_ = x[SortMangaListByMangaTitle - 2]
	_ = x[SortMangaListByMangaStartDate - 3]
	_ = x[SortMangaListByMangaID - 4]
}

const _SortMangaListBy_name = "list_scorelist_updated_atmanga_titlemanga_start_datemanga_id"
var _SortMangaListBy_index = [...]uint8{0, 10, 25, 36, 52, 60}
func (i SortMangaListBy) String() string {
	if i < 0 || i >= SortMangaListBy(len(_SortMangaListBy_index)-1) {
		return "SortMangaListBy(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SortMangaListBy_name[_SortMangaListBy_index[i]:_SortMangaListBy_index[i+1]]
}
func SortMangaListByFromString(s string) (SortMangaListBy, error) {
	for i:=0; i<5; i++ {
		if e:= SortMangaListBy(i+0); s == e.String() {
			return e, nil
		}
	}
	return SortMangaListBy(0), errors.New("cannot deternime SortMangaListBy from string")
}

	func (e SortMangaListBy) MarshalQS(opts *qs.MarshalOptions) ([]string, error) {
		return []string{e.String()}, nil
	}

	func (e *SortMangaListBy) UnmarshalQS(a []string, opts *qs.UnmarshalOptions) error {
		s, err := opts.SliceToString(a)
		if err != nil {
			return err
		}
		*e, err = SortMangaListByFromString(s)
		return err
	}
	func (e SortMangaListBy) MarshalJSON() ([]byte, error) {
		return json.Marshal(e.String())
	}

	func (e *SortMangaListBy) UnmarshalJSON(data []byte) error {
		var s string
		err := json.Unmarshal(data, &s);
		if err != nil {
			return err
		}

		*e, err = SortMangaListByFromString(s)
		return err
	}